mocks:
- name: hello
  config: |
    endpoints:
    - request:
        path: '/hello'
      response:
        bodyFilename: "hello-response.json"

responses:
- name: hello-response.json
  config: |
    {
      "hello": "World"
    }

logs:
  verbose: true

image: mockgo-server:1.0.0-alpine
pullPolicy: IfNotPresent

# The servers name prefix, must be used for example when we want a mockgo-server cluster
# spanning multiple Kubernetes clusters.
serverNamePrefix: ""

healthcheck:
  liveness:
    initialDelaySeconds: 10
    timeoutSeconds: 5
    periodSeconds: 30
    successThreshold: 1
    failureThreshold: 3
    # Only for Kubernetes +1.22 that have pod level probes enabled.
    terminationGracePeriodSeconds:
  readiness:
    initialDelaySeconds: 10
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3

# securityContext for the mockgo-server container
securityContext: {}

#   # Toggle whether to enable external access.
#   # This binds a host port for clients, gateways and leafnodes.
#   externalAccess: false

#   # Toggle to disable client advertisements (connect_urls),
#   # in case of running behind a load balancer
#   # it might be required to disable advertisements.
#   advertise: true

# In case both external access and advertise are enabled
# then a service account would be required to be able to
# gather the public ip from a node.
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

#   # Toggle whether to automatically mount Service Account token in the pod
#   # not set means default value, boolean true/false overrides default value
#   # automountServiceAccountToken: true

#   # The number of connect attempts against discovered routes.
#   connectRetries: 120

#   # selector matchLabels for the server and service.
#   # If left empty defaults are used.
#   # This is helpful if you are updating from Chart version <=7.4
#   selectorLabels: {}

resources: {}

configEndpoint:
  containerPort: 8080
  servicePort: 8080
mockEndpoint:
  containerPort: 8081
  servicePort: 80

#   # Server settings.
#   limits:
#     maxConnections:
#     maxSubscriptions:
#     maxControlLine:
#     maxPayload:

#     writeDeadline:
#     maxPending:
#     maxPings:

#     # How many seconds should pass before sending a PING
#     # to a client that has no activity.
#     pingInterval:

#     # grace period after pod begins shutdown before starting to close client connections
#     lameDuckGracePeriod: "10s"

#     # duration over which to slowly close close client connections after lameDuckGracePeriod has passed
#     lameDuckDuration: "30s"

#   # terminationGracePeriodSeconds determines how long to wait for graceful shutdown
#   # this should be at least `lameDuckGracePeriod` + `lameDuckDuration` + 20s shutdown overhead
#   terminationGracePeriodSeconds: 60

#   logging:
#     debug:
#     trace:
#     logtime:
#     connectErrorReports:
#     reconnectErrorReports:

#   # customConfigSecret can be used to use an custom secret for the config
#   # of the mockgo-server Server.
#   # NOTE: For this to work the name of the configuration has to be
#   # called `mockgo-server.conf`.
#   #
#   # e.g. kubectl create secret generic custom-mockgo-server-conf --from-file mockgo-server.conf
#   #
#   # customConfigSecret:
#   #  name:
#   #
#   # Alternately, the generated config can be extended with extra imports using the below syntax.
#   # The benefit of this is that cluster settings can be built up via helm values, but external
#   # secrets can be referenced and imported alongside it.
#   #
#   # config:
#   #   <name-of-config-item>:
#   #     <configMap|secret>
#   #       name: "<configMap|secret name>"
#   #
#   # e.g:
#   #
#   #  config:
#   #    - name: ssh-key
#   #      secret:
#   #        secretName: ssh-key
#   #    - name: config-vol
#   #      configMap:
#   #        name: log-config

#   jetstream:
#     enabled: false

#     # Jetstream Domain
#     domain:

#     # Jetstream Unique Tag prevent placing a stream in the same availability zone twice.
#     uniqueTag:

#     ##########################
#     #                        #
#     #  Jetstream Encryption  #
#     #                        #
#     ##########################
#     encryption:
#       # Use key if you want to provide the key via Helm Values
#       # key: random_key

#       # Use a secret reference if you want to get a key from a secret
#       # secret:
#       #   name: "mockgo-server-jetstream-encryption"
#       #   key: "key"

#     #############################
#     #                           #
#     #  Jetstream Memory Storage #
#     #                           #
#     #############################
#     memStorage:
#       enabled: true
#       size: 1Gi

#     ############################
#     #                          #
#     #  Jetstream File Storage  #
#     #                          #
#     ############################
#     fileStorage:
#       enabled: true
#       storageDirectory: /data

#       # Set for use with existing PVC
#       # existingClaim: jetstream-pvc
#       # claimStorageSize: 10Gi

#       # Use below block to create new persistent volume
#       # only used if existingClaim is not specified
#       size: 10Gi
#       # storageClassName: ""
#       accessModes:
#         - ReadWriteOnce
#       annotations:
#       # key: "value"

#   #######################
#   #                     #
#   #  TLS Configuration  #
#   #                     #
#   #######################
#   #
#   #  # You can find more on how to setup and trouble shoot TLS connnections at:
#   #
#   #  # https://docs.mockgo-server.io/mockgo-server-server/configuration/securing_mockgo-server/tls
#   #

#   # tls:
#   #   allowNonTLS: false
#   #   secret:
#   #     name: mockgo-server-client-tls
#   #   ca: "ca.crt"
#   #   cert: "tls.crt"
#   #   key: "tls.key"

# mqtt:
#   enabled: false
#   ackWait: 1m
#   maxAckPending: 100

#   #######################
#   #                     #
#   #  TLS Configuration  #
#   #                     #
#   #######################
#   #
#   #  # You can find more on how to setup and trouble shoot TLS connnections at:
#   #
#   #  # https://docs.mockgo-server.io/mockgo-server-server/configuration/securing_mockgo-server/tls
#   #

#   #
#   # tls:
#   #   secret:
#   #     name: mockgo-server-mqtt-tls
#   #   ca: "ca.crt"
#   #   cert: "tls.crt"
#   #   key: "tls.key"

nameOverride: ""
namespaceOverride: ""

# An array of imagePullSecrets, and they have to be created manually in the same namespace
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

# Affinity for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

## Pod priority class name
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
priorityClassName: null

# # Service topology
# # ref: https://kubernetes.io/docs/concepts/services-networking/service-topology/
# topologyKeys: []

# Pod Topology Spread Constraints
# ref https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
topologySpreadConstraints: []
# - maxSkew: 1
#   topologyKey: zone
#   whenUnsatisfiable: DoNotSchedule

# Annotations to add to the mockgo-server pods
# ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# key: "value"

# # Define a Pod Disruption Budget for the stateful set
# # ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
# podDisruptionBudget:
#   enabled: true
#   maxUnavailable: 1
#   # minAvailable: 1

# Node labels for pod assignment
# Ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

# Node tolerations for server scheduling to nodes with taints
# Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
#
tolerations: []
#  - key: "key"
#    operator: "Equal|Exists"
#    value: "value"
#    effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

# Annotations to add to the mockgo-server StatefulSet
statefulSetAnnotations: {}

# Labels to add to the pods of the mockgo-server StatefulSet
statefulSetPodLabels: {}

# # Annotations to add to the mockgo-server Service
# serviceAnnotations: {}

# # additionalContainers are the sidecar containers to add to the mockgo-server StatefulSet
# additionalContainers: []

# # additionalVolumes are the additional volumes to add to the mockgo-server StatefulSet
# additionalVolumes: []

# # additionalVolumeMounts are the additional volume mounts to add to the mockgo-server-server and mockgo-server-server-config-reloader containers
# additionalVolumeMounts: []

cluster:
  enabled: false
  replicas: 3
#   noAdvertise: false

#   # Explicitly set routes for clustering.
#   # When JetStream is enabled, the serverName must be unique in the cluster.
#   extraRoutes: []

#   # authorization:
#   #   user: foo
#   #   password: pwd
#   #   timeout: 0.5

# # Leafnode connections to extend a cluster:
# #
# # https://docs.mockgo-server.io/mockgo-server-server/configuration/leafnodes
# #
# leafnodes:
#   enabled: false
#   port: 7422
#   noAdvertise: false
#   # remotes:
#   #   - url: "tls://connect.ngs.global:7422"

#   #######################
#   #                     #
#   #  TLS Configuration  #
#   #                     #
#   #######################
#   #
#   #  # You can find more on how to setup and trouble shoot TLS connnections at:
#   #
#   #  # https://docs.mockgo-server.io/mockgo-server-server/configuration/securing_mockgo-server/tls
#   #

#   #
#   # tls:
#   #   secret:
#   #     name: mockgo-server-client-tls
#   #   ca: "ca.crt"
#   #   cert: "tls.crt"
#   #   key: "tls.key"

# # Gateway connections to create a super cluster
# #
# # https://docs.mockgo-server.io/mockgo-server-server/configuration/gateways
# #
# gateway:
#   enabled: false
#   port: 7522
#   name: "default"
#   # authorization:
#   #   user: foo
#   #   password: pwd
#   #   timeout: 0.5
#   # rejectUnknownCluster: false

#   # You can add an implicit advertise address instead of using from Node's IP
#   # could also be a fqdn address
#   # advertise: "mockgo-server.example.com"

#   #############################
#   #                           #
#   #  List of remote gateways  #
#   #                           #
#   #############################
#   # gateways:
#   #   - name: other
#   #     url: mockgo-server://my-gateway-url:7522

#   #######################
#   #                     #
#   #  TLS Configuration  #
#   #                     #
#   #######################
#   #
#   #  # You can find more on how to setup and trouble shoot TLS connnections at:
#   #
#   #  # https://docs.mockgo-server.io/mockgo-server-server/configuration/securing_mockgo-server/tls
#   #
#   # tls:
#   #   secret:
#   #     name: mockgo-server-client-tls
#   #   ca: "ca.crt"
#   #   cert: "tls.crt"
#   #   key: "tls.key"

# # In case of both external access and advertisements being
# # enabled, an initializer container will be used to gather
# # the public ips.
# bootconfig:
#   image: mockgo-serverio/mockgo-server-boot-config:0.7.0
#   pullPolicy: IfNotPresent
#   securityContext: {}

# # mockgo-server Box
# #
# # https://github.com/mockgo-server-io/mockgo-server-box
# #
# mockgo-serverbox:
#   enabled: true
#   image: mockgo-serverio/mockgo-server-box:0.11.0
#   pullPolicy: IfNotPresent
#   securityContext: {}

#   # Labels to add to the mockgo-serverbox deployment
#   # ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
#   additionalLabels: {}

#   # An array of imagePullSecrets, and they have to be created manually in the same namespace
#   # ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
#   imagePullSecrets: []
#   #  - name: dockerhub

#   # credentials:
#   #   secret:
#   #     name: mockgo-server-sys-creds
#   #     key: sys.creds

#   # Annotations to add to the box pods
#   # ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
#   podAnnotations: {}
#   #  key: "value"

#   # Labels to add to the box pods
#   # ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
#   podLabels: {}
#   # key: "value"

#   # Affinity for mockgo-server box pod assignment
#   # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
#   affinity: {}

#   # Node labels for pod assignment
#   # Ref: https://kubernetes.io/docs/user-guide/node-selection/
#   nodeSelector: {}

#   # Node tolerations for server scheduling to nodes with taints
#   # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
#   #
#   tolerations: []
#   #  - key: "key"
#   #    operator: "Equal|Exists"
#   #    value: "value"
#   #    effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

#   # Additional mockgo-server-box server Volume mounts
#   extraVolumeMounts: []

#   # Additional mockgo-server-box server Volumes
#   extraVolumes: []

#   # Toggle whether to automatically mount Service Account token in the pod
#   # not set means default value, boolean true/false overrides default value
#   # automountServiceAccountToken: true

# # The mockgo-server config reloader image to use.
# reloader:
#   enabled: true
#   image: mockgo-serverio/mockgo-server-server-config-reloader:0.7.0
#   pullPolicy: IfNotPresent
#   securityContext: {}
#   extraConfigs: []

# # Prometheus mockgo-server Exporter configuration.
# exporter:
#   enabled: true
#   image: mockgo-serverio/prometheus-mockgo-server-exporter:0.9.3
#   portName: metrics
#   pullPolicy: IfNotPresent
#   securityContext: {}
#   resources: {}
#   # Prometheus operator ServiceMonitor support. Exporter has to be enabled
#   serviceMonitor:
#     enabled: false
#     ## Specify the namespace where Prometheus Operator is running
#     ##
#     # namespace: monitoring
#     labels: {}
#     annotations: {}
#     path: /metrics
#     # interval:
#     # scrapeTimeout:

# # Authentication setup
# auth:
#   enabled: false

#   # basic:
#   #   noAuthUser:
#   #   # List of users that can connect with basic auth,
#   #   # that belong to the global account.
#   #   users:

#   #   defaultPermissions:
#   #     publish: ["SANDBOX.*"]
#   #     subscribe: ["SANDBOX.>"]

#   #   # List of accounts with users that can connect
#   #   # using basic auth.
#   #   accounts:

#   # Reference to the Operator JWT.
#   # operatorjwt:
#   #   configMap:
#   #     name: operator-jwt
#   #     key: KO.jwt

#   # Token authentication
#   # token:

#   # NKey authentication
#   # nkeys:
#   #   users:

#   # Public key of the System Account
#   # systemAccount:

#   resolver:
#     # Disables the resolver by default
#     type: none

#     ##########################################
#     #                                        #
#     # Embedded mockgo-server Account Server Resolver  #
#     #                                        #
#     ##########################################
#     # type: full

#     # If the resolver type is 'full', delete when enabled will rename the jwt.
#     allowDelete: false

#     # Interval at which a mockgo-server-server with a mockgo-server based account resolver will compare
#     # it's state with one random mockgo-server based account resolver in the cluster and if needed,
#     # exchange jwt and converge on the same set of jwt.
#     interval: 2m

#     # Operator JWT
#     operator:

#     # System Account Public NKEY
#     systemAccount:

#     # resolverPreload:
#     #   <ACCOUNT>: <JWT>

#     # Directory in which the account JWTs will be stored.
#     store:
#       dir: "/accounts/jwt"

#       # Size of the account JWT storage.
#       size: 1Gi

#       # StorageClass of JWT storage claim.
#       # storageClassName: ""

#     ##############################
#     #                            #
#     # Memory resolver settings   #
#     #                            #
#     ##############################
#     # type: memory
#     #
#     # Use a configmap reference which will be mounted
#     # into the container.
#     #
#     # configMap:
#     #   name: mockgo-server-accounts
#     #   key: resolver.conf

#     ##########################
#     #                        #
#     #  URL resolver settings #
#     #                        #
#     ##########################
#     # type: URL
#     # url: "http://mockgo-server-account-server:9090/jwt/v1/accounts/"

# websocket:
#   enabled: false
#   port: 443
#   noTLS: true

#   sameOrigin: false
#   allowedOrigins: []

#   # This will optionally specify what host:port for websocket
#   # connections to be advertised in the cluster.
#   # advertise: "host:port"

#   # Set the handshake timeout for websocket connections
#   # handshakeTimeout: 5s

# # Network Policy configuration
# networkPolicy:
#   enabled: false
#   # Don't require client label for connections
#   # When set to false, only pods with the correct client label will have network access to the ports
#   # mockgo-server is listening on. When true, mockgo-server will accept connections from any source
#   # (with the correct destination port).
#   allowExternal: true
#   # Add extra ingress rules to the NetworkPolicy
#   # e.g:
#   # extraIngress:
#   #   - ports:
#   #       - port: 1234
#   #     from:
#   #       - podSelector:
#   #           - matchLabels:
#   #               - role: frontend
#   #       - podSelector:
#   #           - matchExpressions:
#   #               - key: role
#   #                 operator: In
#   #                 values:
#   #                   - frontend
#   extraIngress: []
#   # Add extra ingress rules to the NetworkPolicy
#   # e.g:
#   # extraEgress:
#   #   - ports:
#   #       - port: 1234
#   #     to:
#   #       - podSelector:
#   #           - matchLabels:
#   #               - role: frontend
#   #       - podSelector:
#   #           - matchExpressions:
#   #               - key: role
#   #                 operator: In
#   #                 values:
#   #                   - frontend
#   extraEgress: []
#   # Labels to match to allow traffic from other namespaces
#   ingressNSMatchLabels: {}
#   # Pod labels to match to allow traffic from other namespaces
#   ingressNSPodMatchLabels: {}

# # Cluster Domain configured on the kubelets
# # https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
# k8sClusterDomain: cluster.local

# # Define if mockgo-server is using FQDN name for clustering (i.e. mockgo-server-0.mockgo-server.default.svc.cluster.local) or short name (i.e. mockgo-server-0.mockgo-server.default).
# useFQDN: true

# # Add labels to all the deployed resources
# commonLabels: {}

# podManagementPolicy controls how pods are created during initial scale up,
# when replacing pods on nodes, or when scaling down.
podManagementPolicy: Parallel