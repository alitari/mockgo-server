# files only valid if no existingConfigmap is defined
files:
- name: hello-mock.yaml
  config: |
    endpoints:
    - request:
        path: '/hello'
      response:
        bodyFilename: "hello-response.json"

- name: hello-response.json
  config: |
    {
      "hello": "World"
    }

# read config from existing configmap, replaces thr files
# existingConfigmap: myconfig

matches:
  capacity: 1000

# 0 only errors, 1 verbose , 2 debug
logging: 
  api:
    level: 1
  mock:
    level: 1
  kvstore:
    level: 1
  matchstore:
    level: 1

cluster:
  enabled: false
  replicas: 3
  # Define if mockgo-server is using FQDN name for clustering (i.e. mockgo-server-0.mockgo-server.default.svc.cluster.local) or short name (i.e. mockgo-server-0.mockgo-server.default).
  useFQDN: true
  grpcPorts:
    matchstore: 50051
    kvstore: 50151

# image: alitari/mockgo-standalone:latest
pullPolicy: IfNotPresent

# inject custom env variables
# env:
#   - name: MYSECRET
#     value: 'very secret'

scraping: false

terminationGracePeriodSeconds: 30

healthcheck:
  liveness:
    initialDelaySeconds: 5
    timeoutSeconds: 5
    periodSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  readiness:
    initialDelaySeconds: 5
    timeoutSeconds: 5
    periodSeconds: 5
    successThreshold: 1
    failureThreshold: 3

ingress:
  enabled: false
  annotations: {}
  ingressClassName: nginx
  host: "host"
  path: "/"
  pathType: Prefix

# securityContext for the mockgo-server container
securityContext: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

resources: {}

port: 8080

api:
  pathPrefix: "/__"
  username: mockgo
  password: password


nameOverride: ""
namespaceOverride: ""

# An array of imagePullSecrets, and they have to be created manually in the same namespace
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

# Affinity for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

## Pod priority class name
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
priorityClassName: null

# Pod Topology Spread Constraints
# ref https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
topologySpreadConstraints: []
# - maxSkew: 1
#   topologyKey: zone
#   whenUnsatisfiable: DoNotSchedule

# Annotations to add to the mockgo-server pods
# ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# key: "value"

# Node labels for pod assignment
# Ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

# Node tolerations for server scheduling to nodes with taints
# Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
#
tolerations: []
#  - key: "key"
#    operator: "Equal|Exists"
#    value: "value"
#    effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

# Annotations to add to the controlling k8s resource ( statefuleset or deployment)
annotations: {}

podLabels: {}

# Cluster Domain configured on the kubelets
# https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
k8sClusterDomain: cluster.local

# Add labels to all the deployed resources
commonLabels: {}

# podManagementPolicy controls how pods are created during initial scale up,
# when replacing pods on nodes, or when scaling down.
podManagementPolicy: Parallel