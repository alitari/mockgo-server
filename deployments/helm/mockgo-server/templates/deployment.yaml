{{- if not .Values.cluster.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mockgoserver.fullname" . }}
  namespace: {{ include "mockgoserver.namespace" . }}
  labels:
    {{- include "mockgoserver.labels" . | nindent 4 }}
  {{- if .Values.annotations }}
  annotations:
    {{- toYaml .Values.annotations | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels:
      {{- include "mockgoserver.selectorLabels" . | nindent 6 }}
  replicas: 1
  template:
    metadata:
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- include "mockgoserver.prometheusAnnotations" . | nindent 8 }}
      {{- if .Values.podAnnotations }}
        {{- toYaml .Values.podAnnotations | nindent 8 }}
      {{- end }}
      labels:
        {{- include "mockgoserver.selectorLabels" . | nindent 8 }}
        {{- if .Values.podLabels }}
        {{- tpl (toYaml .Values.podLabels) . | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      # Common volumes for the containers.
      volumes:
      - name: config-volume
        configMap:
        {{- if .Values.existingConfigmap }}
          name: {{ .Values.existingConfigmap }}
        {{- else }}
          name: {{ include "mockgoserver.fullname" . }}
        {{- end }}
      serviceAccountName: {{ include "mockgoserver.serviceAccountName" . }}

      # Required to be able to HUP signal and apply config
      # reload to the server without restarting the pod.
      shareProcessNamespace: true

      containers:
      - name: mockgo-standalone
        image: {{ .Values.image | default (printf "%s:%s" "alitari/mockgo-standalone" .Chart.AppVersion) }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        {{- if .Values.securityContext }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        {{- end }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        ports:
        - containerPort: {{ .Values.port }}
          name: http
        env:
        - name: LOGLEVEL_API
          value: {{ .Values.logging.api.level | quote }}
        - name: LOGLEVEL_MOCK
          value: {{ .Values.logging.mock.level | quote }}
        - name: MOCK_PORT
          value: {{ .Values.port | quote }}
        - name: API_PATH_PREFIX
          value: {{ .Values.api.pathPrefix | quote }}
        - name: API_USERNAME
          value: {{ .Values.api.username | quote }}
        - name: API_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "mockgoserver.fullname" . }}
              key: apiPassword
        - name: MOCK_DIR
          value: '/etc/mockgoserver-config'
        - name: MOCK_FILEPATTERN
          value: '*-mock.yaml'
        - name: MATCHES_CAPACITY
          value: {{ .Values.matches.capacity | quote }}
        {{- if .Values.env }}
        {{- toYaml .Values.env | nindent 8 }}
        {{- end }}
        volumeMounts:
        - name: config-volume
          mountPath: /etc/mockgoserver-config
        livenessProbe:
          httpGet:
            path: {{ .Values.api.pathPrefix }}/health
            port: {{ .Values.port }}
          {{- with .Values.healthcheck.liveness }}
          initialDelaySeconds: {{ .initialDelaySeconds }}
          timeoutSeconds: {{ .timeoutSeconds }}
          periodSeconds: {{ .periodSeconds }}
          successThreshold: {{ .successThreshold }}
          failureThreshold: {{ .failureThreshold }}
          {{- end }}

        readinessProbe:
          httpGet:
            path: {{ .Values.api.pathPrefix }}/health
            port: {{ .Values.port }}
        {{- with .Values.healthcheck.readiness }}
          initialDelaySeconds: {{ .initialDelaySeconds }}
          timeoutSeconds: {{ .timeoutSeconds }}
          periodSeconds: {{ .periodSeconds }}
          successThreshold: {{ .successThreshold }}
          failureThreshold: {{ .failureThreshold }}
        {{- end }}
{{- end }}